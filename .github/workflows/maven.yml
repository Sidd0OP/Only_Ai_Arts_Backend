# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  database_url: ${{ secrets.DATABASE_URL }}
  
  cloudflare_token: ${{ secrets.CLOUDFLARE_TOKEN }}
  cloudflare_endpoint: ${{ secrets.CLOUDFLARE_ENDPOINT }}
  cloudflare_acessKey: ${{ secrets.CLOUDFLARE_ACESSKEY }}
  cloudflare_secretKey: ${{ secrets.CLOUDFLARE_SECRETKEY }}
  cloudflare_bucket: ${{ secrets.CLOUDFLARE_BUCKET }}
  cloudflare_publicUrl: ${{ secrets.CLOUDFLARE_PUBLICURL }}
  
  google_client_id: ${{ secrets.GOOGLE_CLIENT_ID }}
  google_client_secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      run: mvn clean install 
      
    - name : Create Docker Image
      run: docker build -t only-ai-art-server . 
      
    - name: Run docker container
      run: |
        CONTAINER_ID=$(docker run -d \
            -e database_url=$database_url \
            -e cloudflare_token=$cloudflare_token \
            -e cloudflare_endpoint=$cloudflare_endpoint \
            -e cloudflare_acessKey=$cloudflare_acessKey \
            -e cloudflare_secretKey=$cloudflare_secretKey \
            -e cloudflare_bucket=$cloudflare_bucket \
            -e cloudflare_publicUrl=$cloudflare_publicUrl \
            -e google_client_id=$google_client_id \
            -e google_client_secret=$google_client_secret \
            only-ai-art-server)
        
        echo "Waiting for docker to run appplication"
        sleep 5
        
        echo "Stopping container"
        docker stop $(docker ps -a -q)

        echo "Fetching container logs"
        docker logs $CONTAINER_ID

        docker save -o only-ai-art-server.tar only-ai-art-server
        
    - name: Upload Docker image as artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: only-ai-art-server.tar

  deploy: 
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Send Dockerfile to vm
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          source: only-ai-art-server.tar
          target: "home/${{ secrets.USERNAME }}/container"
          
    
      
